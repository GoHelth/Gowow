const mongoose = require('mongoose');

// ЁЯЫая╕П ╪е┘Ж╪┤╪з╪б ┘Е╪о╪╖╪╖ ╪з┘Д┘Е╪и┘К╪╣╪з╪к (Schema)
const salesSchema = mongoose.Schema(
    {
        products: [
            {
                productId: {
                    type: mongoose.Schema.Types.ObjectId,
                    ref: 'Product',
                    required: true
                },
                quantity: {
                    type: Number,
                    required: [true, 'тЪая╕П ┘К╪м╪и ╪е╪п╪о╪з┘Д ┘Г┘Е┘К╪й ╪з┘Д┘Е┘Ж╪к╪м'],
                    min: [1, 'тЪая╕П ┘Д╪з ┘К┘Е┘Г┘Ж ╪г┘Ж ┘К┘Г┘И┘Ж ╪з┘Д╪╣╪п╪п ╪г┘В┘Д ┘Е┘Ж 1']
                },
                price: {
                    type: Number,
                    required: [true, 'тЪая╕П ┘К╪м╪и ╪е╪п╪о╪з┘Д ╪│╪╣╪▒ ╪з┘Д┘Е┘Ж╪к╪м']
                }
            }
        ],
        totalAmount: {
            type: Number,
            required: [true, 'тЪая╕П ┘К╪м╪и ╪е╪п╪о╪з┘Д ╪з┘Д┘Е╪и┘Д╪║ ╪з┘Д╪е╪м┘Е╪з┘Д┘К'],
            min: [0, 'тЪая╕П ┘Д╪з ┘К┘Е┘Г┘Ж ╪г┘Ж ┘К┘Г┘И┘Ж ╪з┘Д┘Е╪и┘Д╪║ ╪г┘В┘Д ┘Е┘Ж 0']
        },
        customerName: {
            type: String,
            required: [true, 'тЪая╕П ┘К╪м╪и ╪е╪п╪о╪з┘Д ╪з╪│┘Е ╪з┘Д╪╣┘Е┘К┘Д']
        },
        paymentMethod: {
            type: String,
            enum: ['┘Г╪з╪┤', '╪и╪╖╪з┘В╪й ╪з╪ж╪к┘Е╪з┘Ж┘К╪й', '╪к╪н┘И┘К┘Д ╪и┘Ж┘Г┘К'],
            required: [true, 'тЪая╕П ┘К╪м╪и ╪з╪о╪к┘К╪з╪▒ ╪╖╪▒┘К┘В╪й ╪з┘Д╪п┘Б╪╣']
        },
        createdAt: {
            type: Date,
            default: Date.now
        }
    },
    {
        timestamps: true // ╪е╪╢╪з┘Б╪й ╪к┘И┘В┘К╪к ╪з┘Д╪е┘Ж╪┤╪з╪б ┘И╪з┘Д╪к╪н╪п┘К╪л ╪к┘Д┘В╪з╪ж┘К┘Л╪з
    }
);

// ЁЯЫая╕П ╪е┘Ж╪┤╪з╪б ╪з┘Д┘Ж┘Е┘И╪░╪м ╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ╪з┘Д┘Е╪о╪╖╪╖
const Sale = mongoose.model('Sale', salesSchema);

// ЁЯУд ╪к╪╡╪п┘К╪▒ ╪з┘Д┘Ж┘Е┘И╪░╪м
module.exports = Sale;
